---
title: "NEET-andel – Telemark, Vestfold, Buskerud"
format:
  dashboard:
    orientation: rows
    theme: cosmo
    sidebar:
      - input: tid
      - input: kjonn
      - input: alder
      - input: regions
      - input: fix_domain
      - input: show_fylke_border
server: shiny
---

```{r}
#| context: setup

library(shiny) 
library(leaflet)
library(leaflet.extras) 
library(dplyr)
library(sf) 
library(htmltools)
library(scales) 
library(viridisLite)
library(RColorBrewer)
library(here)
library(tidyverse)
#DATA
sobru_reg <- readr::read_rds(here::here("data/kart_sobru_reg"))
#Geometri og transformasjoner
sobru_reg <- sobru_reg |> sf::st_make_valid() |>
sf::st_transform(4326)
#Fylkesgrenser som eget lag
fylke_border <- sobru_reg |> st_drop_geometry() |>
distinct(fylkesnavn) |>
left_join( sobru_reg |>
group_by(fylkesnavn) |>
summarise(geometry = st_union(geometry), .groups = "drop"),
by = "fylkesnavn"
) |> st_as_sf() |>
st_make_valid() |>
st_transform(4326)
#Inputvalg
kjonn_choices <- sort(unique(sobru_reg$kjonn))
alder_choices <- sort(unique(sobru_reg$alder))
region_choices <- sort(unique(sobru_reg$region))
tid_range <- range(sobru_reg$tid, na.rm = TRUE)
neet_domain_all <- range(sobru_reg$neet_andel, na.rm = TRUE)
bbox <- st_bbox(sobru_reg)
```

### Kart

```{r}
sliderInput(
  "tid", "Velg år:",
  min = tid_range[1], max = tid_range[2],
  value = max(tid_range),
  step = 1, sep = "",
  animate = animationOptions(interval = 1200, loop = FALSE)
)

selectInput("kjonn", "Kjønn:", choices = kjonn_choices, selected = "Begge kjønn")
selectInput("alder", "Aldersgruppe:", choices = alder_choices, selected = "15-29 år")

selectizeInput(
  "regions", "Kommuner (valgfritt):",
  choices = region_choices, selected = character(0),
  multiple = TRUE,
  options = list(placeholder = "Alle kommuner")
)

checkboxInput("fix_domain", "Behold fargeskala lik for alle år", value = TRUE)
checkboxInput("show_fylke_border", "Vis fylkesgrenser", value = TRUE)
```

```{r}
leafletOutput("map", height = 720)

```

```{r}
#| context: server

output$map <- renderLeaflet({
bb <- unname(as.numeric(bbox))
leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels, group = "Lys") %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels, group = "Mørk") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellitt") %>%
fitBounds(bb[1], bb[2], bb[3], bb[4]) %>%
addLayersControl(
baseGroups = c("Lys", "Mørk", "Satellitt"),
overlayGroups = c("Fylkesgrenser"),
options = layersControlOptions(collapsed = TRUE)
) %>% addResetMapButton() %>%
addFullscreenControl() })

```

```{r}
#| context: server


data_filtered <- reactive({
  req(input$tid, input$kjonn, input$alder)

  df <- sobru_reg |>
    dplyr::filter(
      tid   == input$tid,
      kjonn == input$kjonn,
      alder == input$alder
    )

  if (length(input$regions) > 0) {
    df <- df |> dplyr::filter(region %in% input$regions)
  }
df })
pal_reactive <- reactive({
pal_vec <- rev(RColorBrewer::brewer.pal(11, "RdYlGn"))
if (isTRUE(input$fix_domain)) {
brudd <- c(0, 5, 7.5, 10, 12.5, 15, 20, Inf)
} else { df <- data_filtered()
rng <- range(df$neet_andel, na.rm = TRUE)
if (!all(is.finite(rng))) rng <- neet_domain_all
brudd <- pretty(rng, n = 7)
brudd[length(brudd)] <- Inf
}
colorBin(palette = pal_vec, domain = NULL, bins = brudd, na.color = "#f0f0f0") })

```

```{r}
#| context: server

observe({
  df    <- data_filtered()
  pal   <- pal_reactive()
  proxy <- leafletProxy("map")

  if (nrow(df) == 0) {
    proxy %>%
      clearGroup("Kommuner") %>%
      clearGroup("Fylkesgrenser") %>%
      clearControls()
    return(invisible(NULL))
  }

  bb_df <- sf::st_bbox(df) |> as.numeric() |> unname()
  proxy %>% fitBounds(bb_df[1], bb_df[2], bb_df[3], bb_df[4])

  lbl <- sprintf(
    "<b>%s</b><br/>
     År: %s<br/>
     NEET-andel: %s%%<br/>
     NEET antall: %s<br/>
     Totalt: %s<br/>
     Fylke: %s",
    df$region,
    df$tid,
    ifelse(is.na(df$neet_andel), "NA", format(round(df$neet_andel, 2), decimal.mark = ",")),
    ifelse(is.na(df$NEET), "NA", format(df$NEET, big.mark = " ", decimal.mark = ",")),
    ifelse(is.na(df$tot), "NA", format(df$tot, big.mark = " ", decimal.mark = ",")),
    df$fylkesnavn
  ) |> lapply(htmltools::HTML)

  proxy %>%
    clearGroup("Kommuner") %>%
    clearGroup("Fylkesgrenser") %>%
    clearControls() %>%
    addPolygons(
      data = df,
      group = "Kommuner",
      color = "#666666",
      weight = 0.7, opacity = 1,
      fillColor = ~pal(neet_andel),
      fillOpacity = 0.8,
      label = lbl,
      highlightOptions = highlightOptions(
        weight = 2, color = "#222222",
        fillOpacity = 0.9, bringToFront = TRUE
      ),
      smoothFactor = 0.2
    )

  if (isTRUE(input$show_fylke_border)) {
    proxy %>%
      addPolylines(
        data = fylke_border,
        group = "Fylkesgrenser",
        color = "#222222",
        weight = 1.2,
        opacity = 1
      )
  }

  proxy %>% addLegend(
    pal = pal,
    values = if (isTRUE(input$fix_domain)) unname(neet_domain_all) else unname(df$neet_andel),
    title = htmltools::HTML(sprintf(
      "NEET (%%)<br/>%s – %s – %s",
      input$tid, input$kjonn, input$alder
    )),
    opacity = 0.9,
    position = "bottomright",
    labFormat = labelFormat(suffix = "%", transform = identity, digits = 1)
  )
})

```
